ここにあった更新履歴は、やねうら王Wikiに移動しました。

やねうら王 Wiki : https://github.com/yaneurao/YaneuraOu/wiki/

<<<<<<< HEAD
■  2021/12/06 V7.00beta3


- V7.00beta3

	- NUMAでうまくスレッドが使えていなかった環境でうまく動いていることが確認された。(Komafontさんから)
		- Revert and fix earlier windows NUMA patch のcommitで。

		OS Name: Microsoft Windows 10 Pro
		Version: 10.0.19041 Build 19041
		Processor: AMD Ryzen Threadripper 2950X 16-Core Processor, 3500 Mhz, 16 Core(s), 32 Logical Processor(s)

	- BookOnTheFlyで定跡hitしなかったの修正されてる。(たぶん)

	- Qugiyの利きを導入してmagic bitboardのコードを完全除去
		- Core i7 , Surface Pro6 8スレッドで+1%程度nps上がった。
		- ZEN2 , 128スレッドで+2%程度nps上がった
		- ZEN3 , 16スレッドで -2%程度nps下がった
		- ZEN3 , 128スレッド → 未計測
		- まとめ :
			- 1手詰めルーチン高速化、attackers_toなどのtemplate化で+1%ぐらいnpsアップ。
			- 香の利きと歩の打てる場所の高速化で1%ぐらいnpsアップ(Qugiyのアルゴリズム)
			- 角の利きはZEN3やIntel系では1%ぐらいnpsダウン。(Qugiyのアルゴリズム)
			- 飛車の利きもZEN3やIntel系では0.5%ぐらいnpsダウン。(Qugiyのアルゴリズム)
			- トータルとしては、悪化していないし、
				magic bitboardとPEXT bitboardのコードが完全に除去できているし、
				利きのテーブルサイズが大幅に縮んだことにより128スレッドのような
				many threadsでメモリ帯域が問題となる環境の場合、高速化が期待できるのでこれで良しとする。



■  2021/12/05


- BookOnTheFlyでtellg()を使わずにファイルポジションを時前で算出するように修正。


- BookOnTheFlyで二分探索が正しく行われないバグを修正した #217
	- https://github.com/yaneurao/YaneuraOu/pull/217 (たぬきさんのプルリク)

nodchip@tanuki- — 今日 20:54
軽く printf デバッグをした のですが、 current_pos() が、ストリームから最後に読み取った位置より、少し先を指しているように見えます。

info string s=21290C7 m=2129511 e=212995B
next_sfen(): seek_from=2129511
line= 0 1
line=9c9d 7g7f 0 0 1
line=sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B3S1R1/LNSGKG1NL w - 2
info string lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B3S1R1/LNSGKG1NL w - 2
current_pos(): fs.tellg()=61C7E640 file_start=61C7E630
info string Go to right. current_pos()=21295D0
current_pos(): fs.tellg()=61C7E640 file_start=61C7E630

printf デバッグの出力の一部をコピペしたものです。定跡ファイルの [0x21290C7 バイト目, 0x212995B バイト目) を調べています。その中点は 0x2129511 バイト目です。 next_sfen() に 0x2129511 を渡し、「sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B3S1R1/LNSGKG1NL w - 2」という行が得られました。このタイミングで current_pos() を呼んだところ、  0x21295D0 が返ってきました。ところがこの場所は、「sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B3S1R1/LNSGKG1NL w - 2」の次の行の先頭より、だいぶ先を指しています。参考までに「sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B3S1R1/LNSGKG1NL w - 2」の次の行の先頭は、0x212956E でした。
tellg() が返す値が、 VS2019 と MSYS2 + g++ とで異なっているということなのだと思います。



- Revert and fix earlier windows NUMA patch
	- https://github.com/official-stockfish/Stockfish/commit/7218ec4df9fef1146a451b71f0ed3bfd8123c9f9

	> Revert and fix earlier windows NUMA patch
	> revert 9048ac0 due to core spread problem and fix new OS compatibility with another method.

	以前のWindows NUMAパッチを元に戻して修正
	9048ac0のコア分散問題を元に戻し、新しいOSとの互換性を別の方法で修正しました。

- Do more aggressive pruning for some node types
	- https://github.com/official-stockfish/Stockfish/commit/e4b7403f127a36a35bbace9f833ab43babd98a6c

	Enable compilation on older Windows systems
	Improve compatibility of the last NUMA patch when running under older versions of Windows,
	for instance Windows Server 2003. 

	古いWindowsシステムでのコンパイルを可能にする
	旧バージョンのWindows上で動作するNUMAパッチの互換性を向上させました。
	最後のNUMAパッチの互換性を向上させます（Windows Server 2003など）。


■　2021/12/03


- Bitboard::decrement()で使っている命令、SSE4.1以降の命令であったのでifdef修正。
	USE_SSE41 for _mm_add_epi64 #216
	- https://github.com/yaneurao/YaneuraOu/pull/216 (Mizarさんのプルリク)



- WriteDebugLogオプションで以前の(チェックボックスの)ままFalseを代入してくるGUIに対して、
	Falseが指定されている時にファイルは書き出さないように。Trueが指定されていれば"io_log.txt"に
	書き出すようにした。
- StringExtension::ToUpper()追加。


- Bitboard512::byte_reverse()がifdef無効にしたままだったの修正。
	- 以前のコードと同等ぐらいにはなった。

===========================
Total time (ms) : 60040
Nodes searched  : 162063034
Nodes/second    : 2699251
Nodes searched(main thread) : 20570836
Nodes/second  (main thread) : 342618



- Bitboardの利きの初期化コード、整理した
- magic bitboardのtableが残っていたので掃除した。


- 角・飛車の利きにQugiyのアルゴリズムを導入し、magic bitboardを使わないようにした。
- magic tableの初期化が不要になって、起動が少し速くなった。
- 香の利きのコード、足し算でなく引き算を使うように変更。
- BitboardのUnitTestに、利きのテストを追加。
- bswap64のコード、Mizarさんに書いたのもらった。
- Bitboard::unpack(),Bitboard::decrement()追加
- エンジンオプションの"WriteDebugLog"の説明を USI拡張コマンド.txt に追記。
- 角の利きのコード、Qugiyの利きアルゴリズムを導入。
- Bitboard256::unpack(),Bitboard256::decrement,Bitboard256::merge()を追加。

///////////////////////////////////////////////
  大駒の利きの実装に関して、
  Qugiyの作者の森さん、CGPのwainさん、Mizarさんに
  大変お世話になりました。ありがとうございます。
///////////////////////////////////////////////

以下、
bench 1024 1
bench 1024 8
の結果。Surface Pro6で計測。

// 角の利き、1スレだとむしろ遅くなっているが、この環境、AVX256が遅いのだと思う。

・Qugiyの飛車・角の利きコード導入

// 1スレ
===========================
Total time (ms) : 60040
Nodes searched  : 42965064
Nodes/second    : 715607

===========================
Total time (ms) : 60031
Nodes searched  : 43189598
Nodes/second    : 719454

// 8スレ

===========================
Total time (ms) : 60038
Nodes searched  : 158268802
Nodes/second    : 2636143
Nodes searched(main thread) : 19002682
Nodes/second  (main thread) : 316510

===========================
Total time (ms) : 60039
Nodes searched  : 161386424
Nodes/second    : 2688026
Nodes searched(main thread) : 20355963
Nodes/second  (main thread) : 339045


・Qugiyの飛車の利きコード導入(角は前のまま)

// 1スレ
===========================
Total time (ms) : 60043
Nodes searched  : 43571370
Nodes/second    : 725669

===========================
Total time (ms) : 60032
Nodes searched  : 43542455
Nodes/second    : 725320

===========================
Total time (ms) : 60025
Nodes searched  : 43388836
Nodes/second    : 722846

// 8スレ
===========================
Total time (ms) : 60037
Nodes searched  : 161223118
Nodes/second    : 2685395
Nodes searched(main thread) : 20611811
Nodes/second  (main thread) : 343318

===========================
Total time (ms) : 60036
Nodes searched  : 162226247
Nodes/second    : 2702149
Nodes searched(main thread) : 20152300
Nodes/second  (main thread) : 335670


・以前のコード
===========================
Total time (ms) : 60029
Nodes searched  : 41541531
Nodes/second    : 692024

===========================
Total time (ms) : 60022
Nodes searched  : 42866963
Nodes/second    : 714187

// 8スレ
===========================
Total time (ms) : 60040
Nodes searched  : 167172767
Nodes/second    : 2784356
Nodes searched(main thread) : 21334570
Nodes/second  (main thread) : 355339

===========================
Total time (ms) : 60046
Nodes searched  : 163801397
Nodes/second    : 2727931
Nodes searched(main thread) : 19962799
Nodes/second  (main thread) : 332458


■　2021/12/02


- 香の利きのコード、足し算でなく引き算を使うように変更。
- BitboardのUnitTestに、利きのテストを追加。
- bswap64のコード、Mizarさんに書いたのもらった。


- start_logger()の引数がboolから`std::string`に変更されたが、WriteDebugLogオプションのデフォルト値が`false`のままだったため、デフォルトではデバッグログがファイル名`false`に常に書き出されていた。
	- https://github.com/yaneurao/YaneuraOu/pull/215 (Mizarさんのプルリク)

https://github.com/yaneurao/YaneuraOu/commit/fa10bc3ad096c265041fbfe82f7259bcfc5aa680#diff-56d0745227250f49421f61a56de172b8b68624734977a6ff2c8f4a5fd67d0ba2L120-R131


■　2021/12/01


- 飛車の縦利きを求めるコード、表引きをやめる。
	- 速くはなってないかも知れないが、余計な表引きが減るのでまあいいや。


- unittestの指し手生成祭りのperftの値が間違っていたの修正。
- 香の利き、1～7筋と8～9筋とで処理を分けた。


- 評価関数埋め込み対応、HalfKPvmビルド対応など #214(Mizarさんのプルリク
	- https://github.com/yaneurao/YaneuraOu/pull/214

	TensorRTのバージョン取得、ヘッダ埋め込み定数ではなく getInferLibVersion() を参照
	ビルド時に参照したTensorRTのバージョンではなく、実行時に読み込まれたTensorRTのダイナミックリンクライブラリのバージョンを参照してシリアライズ化ファイルのファイル名を決定するため。
	VisualC++でのソースコード読み込みにて、UTF-8の文字セットを既定に
	CUDA/TensorRT関連のビルド時に、インクルードファイルを別の文字セットとして読み込んで警告が出ていたため。
	Make CI (DeepLearning for Ubuntu Linux) ビルドにてビルド環境にインストールするパッケージを削減
	Deep-TensorRT ビルドにて使用する TensorRT のバージョンを 8.2.1 GA に変更
	dllの環境変数等による読み込み順の影響を低減するため、ビルド時に関連するdllを極力実行ファイルと同じフォルダに配置するよう設定。
	ONNX Runtime NuGetパッケージの更新、ORT-CUDA 廃止、ORT-TRT 対応。
	ORT-TRTはORT無しのTensorRTビルドより若干遅く、挙動も若干特殊ですが、自動ビルド対応が容易となります。
	USIオプションを16GPUまで対応
	NNUE評価関数の実行バイナリ埋め込みに対応、水匠5評価関数実行バイナリ埋め込み版のリリースビルド対応
	HalfKPvmのビルド対応
	Android NDK を最新のLTS版に変更
	明示的にストリームを作成しないで、Per-thread default stream(cudaStreamPerThread)を使う
	TadaoYamaoka/DeepLearningShogi@3d408cc の取り込み


■　2021/11/30 V700beta2


- V700beta2

engine1 = YaneuraOuNNUE_V700beta2.exe , eval = Suisho5_211028
engine2 = YaneuraOuNNUE_V700beta1.exe , eval = Suisho5_211028
T2,b1000,1450 - 170 - 1380(51.24% R8.6[-2.15,19.34]) winrate black , white = 53.22% , 46.78%
T2,b2000,920 - 155 - 925(49.86% R-0.94[-14.24,12.36]) winrate black , white = 52.41% , 47.59%
T2,b4000,452 - 99 - 439(50.73% R5.07[-14.07,24.21]) winrate black , white = 54.43% , 45.57%
Quiet ttMove extensionsの修正と高速化で、弱くはなってなさそう。



■　2021/11/29


- Mate1plyのコードまわり、templateをかなり導入した。


- _mm_shuffle_epi8はSSE3の命令らしくSSE2用のビルドが失敗していたの修正。


- Qugiyの香の利きを実装した時に差し替えた歩の利きの初期化コード、バグっていたの修正。
	- これで落ちなくなった。よかった。
- MoveGenに対してassert増した。
- attackers_toなどtemplate版の利きを使うようにした。


- 起動時に startup_info.txt があれば、それを出力する。
	- 開発時にfコマンドによるマクロの説明などを書いておくのに便利。
- bitboard.cpp、SSE2なし環境でコンパイル通ってなかったの修正。


- attackers_to(Square sq, const Bitboard& occ)、利きをtemplate版の方を呼ぶようにした。
	- 少しだけ高速化。
- byte_reverse()、g++だとコンパイル通ってなかった。
	- MOVBE自体、対応してないCPUわりとあるようで、使わないほうが無難。
	- https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html
	- byte_reverse()削除。

// ----------------------------
//    byte reverse
// ----------------------------

// 書いてみたものの、この速度なら使う価値がないと思う。

// 32bitの値をbyte単位で逆順にして返す。
// byte_reverse()から64bit環境でない時に呼び出される。
inline u32 byte_reverse32(u32 u)
{
//#if defined(__GNUC__) && !defined(IS_64BIT)
	// GCCはこのマクロが定義されているはず。
	//return _loadbe_i32(&u);
	//
	// 	→ MOVBE命令が実装されている環境(SSE3以降？)でないと使えないようだ。
	// 
//#else
	// それ以外なのでどうしようもない。
	// これ遅いから使わないほうがいいと思う。
	return ((u&0xff000000)>>24) | (((u&0x00ff0000)<<8)>>16) | (((u&0x0000ff00)>>8)<<16) | ((u & 0x000000ff) << 24);
//#endif
}

// 64bitの値をbyte単位で逆順にして返す。
inline u64 byte_reverse(u64 u)
{
//#if (defined(_WIN64) && defined(_MSC_VER)) || (defined(__GNUC__) && defined(IS_64BIT))
#if defined(_WIN64)

#if !defined( __clang__ ) 
	return _load_be_u64(&u); // MSVCとg++はこのマクロが定義されているはず？Clangで存在しない模様。
#else
	return _loadbe_i64(&u);  // こう書けばMSVCとClangでコンパイル通る模様。でもg++でコンパイルが通らない。
#endif

#else 
	// 下位4バイトを逆順にして上位へ。上位4バイトを逆順にして下位へ。
	return ((u64)byte_reverse32((u32)u) << 32) | (u64)byte_reverse32((u32)(u >> 32));
#endif
}



- Quiet ttMove extensions修正。

			else if (   PvNode
				&& move == ttMove
				&& move == ss->killers[0]
				&& (*contHist[0])[to_sq(move)][movedPiece] >= 10000)
				extension = 1;

	このcontHist[0]の[]内、1つ目と2つ目が入れ替わっていた。(Stockfishからやねうら王に持ってくる時、ここ入れ替えないといけないので注意)


- engine_options.txt、TextReaderを用いて読み込むように変更。
	- 以前のコードだとutf-8のBOMがついていると読み込めていなかった。


- Bitboard256、AVX2命令使ってあるのにUSE_SSE2になっていたの修正。
	- SSE2用のビルドに失敗していた。


- Clangでビルドエラーになっていたの修正。
	- ひとつ前のcommitの_load_be_u64()、Clangだと_loadbe_i64と書かないといけないようだった。


- 角と飛車の飛び利きをmagic bitboardを用いないで実現する作業、途中でgive upしたので作業途中まで反映。
	- Qugiyのコードに似た考えかた。
		- Qugiyの作者に色々教えていただきました。ありがとうございます。
	- Bitboard256みたいなclassを作って、そのclassの演算子だけで実装する。
		- Bitboard256のclassの実装に関して、wain_CGPさんに色々教えていただきました。ありがとうございます。
	- Bitboard512があれば、角の4方向の利きは並列的に求められる。
	- 飛車の利きは、上方向がshuffleでbyte単位で逆順にした時に、升が逆順に並ばないから求まらない。
		- Qugiyもここは先手の香の利きを合成している。

	- 角の利きをBitboard256 classで

	Bitboard256という、Bitboardを２つ連結させたclassを用意した。
	また、Bitboard::byte_reverse()というbyteで逆順にしたBitboardを返すメソッドを追加した。
	あとwainさんに教えていただいたSIMDでymmレジスタに対して128bit×2のaddを行うテクニックを用いて、Bitboard256::add128()を実装する。(まだしていない)

	これらを用いて、角の利きを計算することは出来るはず。(私の理解が間違っていなければ)
	ところが、byte_reverse()するのにMOVBEすらない環境だとbyteを入れ替えるだけでも大変なので、magic bitboardを用いるより遅くなる。(計測していない。あくまで予想)

	そのため、AVX2が使える環境に限定した方がいいような気はしている。問題は、ZEN2のようなPEXTが激遅である環境以外で高速になるのかどうかである。
	せめてmagic bitboardと同じぐらいの速度(1%程度の速度低下は可)であるなら、これを使うことにしてmagic bitboardの実装を削除できる。
	しかしその場合でもMOVBEが使えない環境のためにmagic bitboardの実装を残しておかないといけないかもしれない。

	正直、magic bitboard(PEXTありとなし)の実装と、Bitboard256の実装(AVX2ありとなし)と、byte_reverse(MOVBEありとなし)とこの3つを同時に保守していくのは避けたいところである。

	WCSC32では、AWSのc6i.32xlarge(128 vCPU)を使うとしてこれ、
		最大 3.5 GHz の第 3 世代インテル Xeon スケーラブルプロセッサー
	と書いてあるのでPEXT、遅くない。

	そんなわけで、飛び利きのコード、刷新してもこの環境で速くなるかどうか怪しいので、ここで一旦作業を保留しておく。


■　2021/11/28


- Androidのclangなどでビルドが通らなくなっていたの修正。
	- attackers_toをtemplate化した時に、.cppから.hに移動させてなかったから、
		C++ templateの扱いがinclusion modelだとコンパイル通らないのだった。


- SSEなし環境でビルドが通らなくなっていたの修正。
	- andnot()実装した時に、SSEなしの時の関数名をand_notとしてしまっていた。
	- 古い利きのコードと間違えて掃除してしまっていた。
- 古い利きのコード、掃除。



■　2021/11/26 V7.00beta


- Handに対するoperator<<の出力先が正しくない問題を修正 #213(komori-nさんのプルリク)
	- https://github.com/yaneurao/YaneuraOu/pull/213


- Position::UnitTestに指し手生成祭りのperft追加。
- 一つ前のcommitでまだコンパイルエラーになっていたの修正。


- yo_cluster.cppが非Windows環境用にビルドした時にコンパイルエラーになっていたの修正。


- Qugiyの飛び利きのコードを移植その2。
	- 二歩になる升のBitboardをbit演算で得るコードを実装。

- Position::set_check_infoをtemplate化。
	template <bool doNullMove , Color Us>
	void Position::set_check_info(StateInfo* si) const;

- Position::attackers_to()をtemplate化して先後分けた。
- 駒の利き関連のコード、先後をtemplate化して分けた。


- Qugiyの飛び利きのコードを移植その1。香の飛び利き、先後。
	- cf.WCSC31 Qugiy アピール文書 : https://www.apply.computer-shogi.org/wcsc31/appeal/Qugiy/appeal.pdf
	- 最終的に全部盛りで、ZEN2で4%ぐらい速くなるらしい。
- PositionにperftのUnitTest追加。
- pawnEffect,lanceEffectなどtemplate化。
- Bitboardにandnotなど追加。
- PawnEffect(Bitboard)紛らわしいのでPawnBbEffectと改名。


		//Square sq = SQ_21;
		//Bitboard occ(SQ_27);
		Square sq = SQ_11;
		Bitboard occ(SQ_17);
		cout << lanceEffect<WHITE>(sq, occ);


// やねうら王の従来の遠方駒の利きを求めるコードを用いる。
// これをundefするとApery型の利きのコードを用いる。(そっちのほうがPEXTが使えない環境だと速い)
// 互換性維持および、55将棋のように盤面を変形させるときに、magic tableで用いるmagic numberを求めたくないときに用いる。

// #define USE_OLD_YANEURAOU_EFFECT
→　削除


- やねうら王 V7.00beta


- HASH_KEY_BITS、Makefileの方から変更できるようにした。
	- スーパーテラショック定跡を生成するとき128を指定してコンパイルした実行ファイルを使いたい。


- やねうら王TheClusterその1(まだ書きかけ)


- "test evalsave"コマンド復活。これがないと空の評価関数ファイルを作る時に困るのだった。
	- たまさんからの指摘。


- ふかうら王のエンジンオプションに以下の6パラメーターを追加。(dlshogiにあるのと同じ意味)
	C_fpu_reduction , C_fpu_reduction_root , C_init , C_base, C_init_root , C_base_root

- dlshogiのモデルの設定ファイルと互換性をもたせる。

第2回世界将棋AI電竜戦エキシビジョンバージョン
https://github.com/TadaoYamaoka/DeepLearningShogi/releases/tag/dr2_exhi

// 以下のパラメーターをふかうら王に追加し、dlshogiと同じ設定ファイルが使えるようにする。

	C_init=127
	C_base=27126
	C_fpu_reduction=31
	C_init_root=112
	C_base_root=33311
	Softmax_Temperature=140

dlshogiは、モデルファイル名が model-dr2_exhi.onnx の時、model-dr2_exhi.onnx.ini にオプション設定を書けるようになっている。
やねうら王は、EvalDirで指定したフォルダのなかにある eval_options.txt にオプション設定を書けるようになっている。
// よって、dlshogiの model-dr2_exhi.onnx.ini を、やねうら王の eval/eval_options.txt にコピーすればそのまま動く。

- engine_options.txt , eval_options.txt は、
1. option name UCT_Threads1 type spin default 2 min 0 max 256 のような形式("usi"コマンドに対してエンジンが返してくる形式)
2. オプション 値
3. オプション名=値
の3通りの書き方ができるようにした。(以前は、1.と2.だけサポートしていた。今回dlshogiの.iniを読み込むために3.の形式をサポートすることにした)


- NNUEのエンジンオプションにFV_SCALE追加。
	- 水匠5ではFV_SCALE = 24にしたほうが強いらしいので。


■　2021/11/25


- やねうら王探索パラメーター刷新。(+R15)


- やねうら王探索、capturesSearchedに追加する条件、調整。(+R10)


- 王手延長の条件を調整する。
	- たややんさんからの報告。

	// 将棋では王手はわりと続くのでStockfishのコードは明らかにやりすぎ。
	else if (   givesCheck
				&& depth > 6
				&& abs(ss->staticEval) > 100)
		extension = 1;

	以下のようにする。

	// 王手延長は、開き王手と駒得しながらの王手に限定する。
	else if (givesCheck
		&& depth > 6
		&& abs(ss->staticEval) > 100)
		&& (pos.is_discovery_check_on_king(~us, move) || pos.see_ge(move)))
		extension = 1;


- TensorRT: 転送・推論を非同期に行う #211 (Mizarさんのプルリク)

	cudaStream_t stream はこのPRではGPUごとに持っていますが、推論自体を並列に行いたい時は context, stream, inputDims1, inputDims2, x1_dev, x2_dev, y1_dev, y2_dev などは探索スレッドごとに持つように変更した方が良いかもしれません。（推測であり未確認）

	参考:
	ふかうら王 アピール文章
	https://drive.google.com/open?id=1aO0gLSYvhph1uL_gaaohLYWTMpe1BdA8



- NNUEにHalfKP_vmの評価巻数を追加 #212
	- https://github.com/yaneurao/YaneuraOu/pull/212 (tanuki-さんのプルリク)
	- @nodchip : 第 2 回世界将棋 AI 電竜戦本戦で「タヌキの為に鐘は鳴る」が採用した、HalfKP_vm の PR です。よろしくお願いいたします。


	* HalfKP_vmを追加した

	# Conflicts:
	#	source/YaneuraOu.vcxproj.filters

	* halfkp_vm_256x2-32-32.hを追加した

	# Conflicts:
	#	source/YaneuraOu.vcxproj
	#	source/eval/nnue/nnue_architecture.h

	* HalfKP_vmの駒インデックスの誤りを修正した

	* Makefileでhalfkp_vm_256x2-32-32を指定できるようにした

	# Conflicts:
	#	source/Makefile

	# Conflicts:
	#	source/Makefile
	#	source/eval/nnue/nnue_architecture.h



■　2021/11/17


- 王手延長の条件を調整する。
	- たややんさんからの報告。

	// 将棋では王手はわりと続くのでStockfishのコードは明らかにやりすぎ。
	else if (   givesCheck
				&& depth > 6
				&& abs(ss->staticEval) > 100)
		extension = 1;

	以下のようにする。

	// 王手延長は、開き王手と駒得しながらの王手に限定する。
	else if (givesCheck
		&& depth > 6
		&& abs(ss->staticEval) > 100)
		&& (pos.is_discovery_check_on_king(~us, move) || pos.see_ge(move)))
		extension = 1;



V650k

- Simplify Pv nodes related logic in LMR : https://github.com/official-stockfish/Stockfish/commit/f5df517145890ecee3d855e98470241b68645b87
- Simplify LMR multiThread condition : https://github.com/official-stockfish/Stockfish/commit/1163d972a9a1e480d9130c5fabbf869cdb7f7ecb


V650j

- Time-management fix in MultiPV mode. : https://github.com/official-stockfish/Stockfish/commit/371b522e9ed9cab91274ff111c0bf4b0f6ec3340
	- MultiPVでtime managementがおかしかった原因。
- More futility pruning : https://github.com/official-stockfish/Stockfish/commit/11c6cf720d4cdd882bc0f2c36e25910cf77fb57b
- Simplify multi-cut condition : https://github.com/official-stockfish/Stockfish/commit/673841301b0cc6ed78c4db3e6ec2a0b9a010c8cb


V650i

- Increase TTdepth acceptance some Threads : https://github.com/official-stockfish/Stockfish/commit/927a84d310fb41222518ea80d398933a0ba3e5b7

- Extend quiet tt moves at PvNodes : https://github.com/official-stockfish/Stockfish/commit/21ad356c0900c9eba9b7b1f7453f934eab80f303
	- PV nodeで quietなttは良い指し手のはずだから延長するというもの。

- ソースから取り除く
```
		// Last captures extension

		// 最後に捕獲した駒による延長
		// 捕獲した駒の終盤での価値がPawnより大きく、詰みに直結しそうなら延長する。
		// 将棋では駒は終盤で増えていくので関係なさげ。

		//else if (PieceValue[EG][pos.captured_piece()] > PawnValueEg
		//	&& pos.non_pawn_material() <= 2 * RookValueMg)
		//	extension = 1;
```


V650h

- Simplify probCutCount away : https://github.com/official-stockfish/Stockfish/commit/67d06164833857d3497010e952fd0d2c5f00c095
	- probCutCount要らなかったらしい…。

- Compute ttCapture earlier : https://github.com/official-stockfish/Stockfish/commit/580698e5e57f40dcba52b92a7f0c7a0e9ab09437
	- ttCaptureの値を早めに計算してこれで枝刈りするようにした。
	- 枝刈り条件がcaptureOrPawnPromotionに変わった影響が出るかも。

- Do more deeper LMR searches. : https://github.com/official-stockfish/Stockfish/commit/a8330d5c3bfeb4c9d5c55083223792e0989bb9c6


V650g

- do not store qsearch positions in TT as exact. : https://github.com/official-stockfish/Stockfish/commit/45e5e65a28ce7e304c279fabf5f8a83cced73013
	- oldAlpha変数が除去された。
	- qsearchした局面を置換表にexactとして保存しなくなった。
	- Mateが出て詰まし損なうことがあったの、これが原因か？


V650f

- Smooth improving : https://github.com/official-stockfish/Stockfish/commit/4231d99ab408674115623f42f7ff89f3f189ca23
	- PARAM_NULL_MOVE_MARGIN3の意味が変わったので注意。


V650e

- Remove noLMRExtension flag : https://github.com/official-stockfish/Stockfish/commit/8a74c089286913f24a641aa37532006088d0f438

- Simplify Skill implementation : https://github.com/official-stockfish/Stockfish/commit/ef4822aa8d5945d490acca674eb1db8c3c38e9d5
	- SkillLevelというハンデ用のオプションの実装を単純化するだけなので通常対局の棋力には影響しないはず。


V650d

- Capping stat bonus at 2000 : https://github.com/official-stockfish/Stockfish/commit/54a989930ebed200c3278c725151e26a2c0da37a
	- stat bonusは2000でcapする。(最大値を2000にする)

- Range reductions : https://github.com/official-stockfish/Stockfish/commit/00e34a758f2ca170986550a1f8f25dfe691ca511
	- adding reductions for when the delta between the static eval and the child's eval is consistently low.

- このコード削除
#if 1
		// 【計測資料 37.】 update_quiet_stats()で、歩以外に対してreverse_moveにペナルティ。

		if (type_of(pos.moved_piece_after(move)) != PAWN && !is_drop(move))
			thisThread->mainHistory[from_to(reverse_move(move))][us] << -bonus;
#endif

V650c
- Tweak initial aspiration window. : https://github.com/official-stockfish/Stockfish/commit/a0259d8ab9661b7f625474d2cbe18481ef69bbf2


■　2021/11/16


- スーパーテラショック定跡、探索部のソースコード整理。


Fix processor group binding under Windows. :  https://github.com/official-stockfish/Stockfish/commit/9048ac00db12a9ac48bff9b9eb145b30ff88d984
	- Windows Build 20348からNUMA APIの挙動が変更になるらしく、その対策。


V650b
- Reduce more if multiple moves exceed alpha : https://github.com/official-stockfish/Stockfish/commit/c8459b18ba2d6ddc76d6db90d6eab346ed682e69
	- あるnodeでalphaが更新された回数を記録して枝刈りに利用する。
- Do more reductions at Pv nodes with low delta : https://github.com/official-stockfish/Stockfish/commit/c2b9134c6e7637ea375b4755a6f96dc772c6bb17
- Simplify Pv nodes related logic in LMR : https://github.com/official-stockfish/Stockfish/commit/f5df517145890ecee3d855e98470241b68645b87
- Reduce use of lazyEval : https://github.com/official-stockfish/Stockfish/commit/7b278aab9f61620b9dba31896b38aeea1eb911e2
	- これ、evaluateの評価を遅延させていないので、やねうら王では影響受けない。
	- 単にThreadクラスにbestevalが移動しただけ。

V650a
- Simplify ttHitAverage away : https://github.com/official-stockfish/Stockfish/commit/0bddd942b4d096ff31132a4c3e7aef016d0f2d41
- Adjust ButterflyHistory decay parameter : https://github.com/official-stockfish/Stockfish/commit/2c86ae196df8b2a1197e0de1853a6458e404a976


■　2021/11/09

- スーパーテラショック定跡、banned_nodesの取り扱いが間違っていたの修正。
- テラショック化コマンド、循環を許すようにした。(変換が組み合わせ爆発を起こして終わらないので…)
- Concurrent::ConcurrentSet追加。


■　2021/11/08


- スーパーテラショック定跡のテラショック化コマンド("makebook stera_convert")で、leaf nodeまでのdepthをdepthとして出力するようにした。
	- 千日手手順は長くなるほうを選択したいのだが、leaf nodeまでのdepthが深いほうに加点して、alpha-beta探索を行う場合、
	先後協力して(飛車を無駄に動かし合うなど)、depth伸ばしたほうが得となってしまう。
	// 定跡掘ってる時に、組み上げた局面で手待ちのためにそういう手順が可能な局面がある。
	- 仕方ないので、テラショック化の時はvalueが同じ時にdepthを優先しないようにする。色々難しいんだな…ほえほえ。
	- 自分(root)が先手だとして、先手は最長、後手は最短を目指すべきではある。(以前作ったテラショック化コマンドはそうしてあるが、
	　あれ実装が複雑になる＆遅いんだよな…)
	- どのみち、自分が最長、相手が最短にしようとする場合でも、飛車だけそれとなく動かし続けて手待ちできる場合、すごく長手順の千日手に
	  なる可能性はあって、そういう時に長手数で千日手になるほうを定跡として目指すのが正しいかというとそうではないから…。
	  単純に手数が最長になるところを目指すのは無理がある。



■　2021/11/07


- スーパーテラショック定跡、千日手局面を自動的にbanする仕組みを導入。
	- banされている局面数を定期的に出力する
	- ranged_alpha_beta_loopをインクリメントするのやめる。


- スーパーテラショック定跡、千日手局面に到達して思考対象局面がなくなってしまう時のリカバー処理追加。


- 定跡の書き出しをTextWriterクラスを用いて高速化。


■　2021/11/04


- "makebook extract_sfen_from_db"コマンド追加。
- "makebook extract_sfen_from_sfen"コマンド追加。

- SystemIO::TextWriter追加。わりと速い。

- スーパーテラショック定跡生成部、gccで警告でてたの修正。

- 定跡ファイルBOMついてても、二分探索する時に先頭行はヘッダ行だから関係なくて、うまくprobeできるような気がしてきた。


■　2021/11/03


- TensorRT8以降に対応
	https://github.com/yaneurao/YaneuraOu/pull/210 (Mizarさんのプルリク)

	* - TensorRT8 : `deserializeCudaEngine()` を2引数に変更
	  3引数のものはTensorRT8以降、非推奨。
	  https://docs.nvidia.com/deeplearning/tensorrt/api/c_api/deprecated.html
	  TensorRT 7.2.3 API : https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-723/api/c_api/classnvinfer1_1_1_i_runtime.html#a8821d6dbbc7bcec2da4ae8ebd927eb89
	  TensorRT 8.2.0 API : https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-820-ea/api/c_api/classnvinfer1_1_1_i_runtime.html#aa0fa4ae510ad803ac2f0caf5a6abe320

	* - TensorRT8 : `buildEngineWithConfig()` -> `buildSerializedNetwork()`
	https://docs.nvidia.com/deeplearning/tensorrt/api/c_api/deprecated.html

	* - TensorRT8 : Deprecated `destroy()`
	https://docs.nvidia.com/deeplearning/tensorrt/api/c_api/deprecated.html


- fコマンド追加。
	- f 1 とやると1.txtからUSIコマンドを読み込みそれを丸ごと実行する。
	- USI拡張コマンド.txtにその説明を追加。

- SystemIO::ReadAllLines()でutf-8のBOMは読み飛ばすように。
- SystemIO::TextReader()でもutf-8のBOMは読み飛ばすように。
	- あとGetLineNumber()追加。
- 定跡ファイルの読み込みはTextReader()を使っているが、on the flyで読み込む時はそうではないので
	定跡ファイルはon the flyで読み込むときはutf-8のBOMついてると駄目。
	なので、結論的には、現時点では定跡ファイルにはBOMつけないで。

- スーパーテラショックコマンドの説明を解説.txtに追加。


■　2021/11/01


- msys2: pactoys-git -> pactoys #209 (Mizarさんのプルリク)


- makebook steraコマンド、search_delta_on_kifが反映していなかったのを修正。
- misc.cppがコンパイルエラーになっていたの修正。


- makebook stera_convertコマンド、パラメータが指定できていなかったのを修正。
- ProgressBar、"readyok"などにタイミングが被るとGUIが誤動作しかねないので
	makebookコマンドの時だけ有効にするように変更。
	learnコマンドもやったほうがいい？


■　2021/10/30


- スーパーテラショック定跡コマンドでPVが千日手になった時に無限再帰でstack overflowになる問題修正。
- 定跡の読み込み時にProgressBarを使うようにした。(これUSI違反になるか…？)
- BinaryReader、method名が小文字から始まっていたのでTextReaderに倣い、大文字から始めるようにした。


- スーパーテラショック定跡コマンド、高速化その3
	- 次に思考するleaf nodeの選出、100倍ぐらい速くなった。
	- テラショック化コマンドも速くなった？


- スーパーテラショック定跡のテラショック化コマンド"makebook stera_convert"追加。(テスト中)
- BookTools追加。
- ProgressBar追加。

- misc.hで include <condition_variable> がなくてコンパイルエラーになっていたのを修正
	- Mizarさんからの指摘


- スーパーテラショック定跡、高速化その2。
	- 別スレッドで思考すべきスレッドを探索する。
		- GPU利用率ほぼ100%になった。
	- 定跡DB上に全合法手が存在しないnodeは作り直す。
	- root_sfens.txtに"startpos moves XX"と書くと指し手が弾かれていたの修正。
	- root_sfens.txtを指定しない場合、以下の先手の初期局面、後手の初期局面(初期局面から先手が1手指したすべての局面)が用いられるようにした。

// book/root_sfens.txt
startpos moves 2g2f
startpos moves 7g7f
startpos moves 1g1f
startpos moves 9g9f
startpos moves 6i7h
startpos moves 3i3h
startpos moves 3i4h
startpos moves 3g3f
startpos moves 5i6h
startpos moves 4i5h
startpos moves 7i6h
startpos moves 5i5h
startpos moves 6g6f
startpos moves 5g5f
startpos moves 4g4f
startpos moves 6i6h
startpos moves 4i4h
startpos moves 7i7h
startpos moves 5i4h
startpos moves 4i3h
startpos moves 2h3h
startpos moves 2h6h
startpos moves 2h5h
startpos moves 2h4h
startpos moves 1i1h
startpos moves 2h1h
startpos moves 2h7h
startpos moves 6i5h
startpos moves 9i9h
startpos moves 8g8f
startpos

- Producer Consumer Queueの実装をした。
	- Concurrent::ConcurrentQueue


■　2021/10/29


- deep-ubuntu: cuda-toolkit-11-5 #207
	https://github.com/yaneurao/YaneuraOu/pull/207 (Mizarさんのプルリク)


- スーパーテラショック定跡、高速化。
- 定跡読み込み時に読み込んだ局面数を出力するようにした。
- hash<Key64>の定義不要だったので削除。

/*
template <>
struct std::hash<Key64> {
	size_t operator()(const Key64& k) const {
		// 下位bit返すだけで良いのでは？
		return (size_t)(k);
	}
};
*/
// →　これは 最初からC++のheader上で定義されているはず。


- スーパーテラショック定跡生成ルーチン 作り直した
	- ranged alpha beta探索、無理があった。


■　2021/10/26


- スーパーテラショック定跡、deltaを調整
	- beta cutの時の処理、間違っていたの修正。
	- デフォルト値を調整。
	- ranged alpha-beta searchの時もPV出力。



■　2021/10/25


- スーパーテラショック定跡手法による定跡生成コマンド追加。
	makebook steraコマンド
	- 簡単な動作は確認した。
	- 使い方の説明はあとで書く。


- ふかうら王、デフォルトで2スレッドに変更。(最近15bを使うことが多くなってきたので)
- dlshogi::GetSearchResult()追加。これで探索結果を学習部や定跡部に返すことができる。
- ArgumentParserのソースコメント追加。
- StringExtension::to_string_with_zero()追加。


- HASH_KEY_BITSを128,256にした時にコンパイルエラーになっていたの修正。
- std::unordered_set/mapにHASH_KEYが、HASH_KEY_BITSが128,256の時に使えなかった問題を修正。
- eval_coefのコメント、紛らわしかったので修正。


- ふかうら王のTensorRT版のビルド、CUDA 11.4→CUDA 11.5を参照するように変更。


■　2021/10/22


- msys2 toolchain llvm-13, gcc-11.2 (add arch AVXVNNI, ZEN3) #205
	- https://github.com/yaneurao/YaneuraOu/pull/205 (Mizarさんのプルリク)

	https://twitter.com/msys2org/status/1451060685044129795
	Toolchain updates: clang/llvm 12.0.1 → 13.0.0 and gcc 10.3 → 11.2
	msys2 toolchain の更新に伴い、 ZEN3, AVXVNNI を msys2 でのビルドテストおよびリリースビルドの対象に加えるよう変更します。


- cuda-11.4 の明示 #204
	- https://github.com/yaneurao/YaneuraOu/pull/204 (Mizarさんのプルリク)

	CUDA Toolkit 11.5 Downloads : https://developer.nvidia.com/cuda-downloads
	NVIDIA CUDA Toolkit Release Notes : https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html
	CUDA Toolkit 11.5 のリリースに伴ってなのか、TensorRT版のビルドテストにおいてincludeファイルが見つからなくなるエラーが発生しているため、当面は /usr/local/cuda/ ではなく、明示的に /usr/local/cuda-11.4/ 以下を見るよう変更します。


■　2021/10/20


- ふかうら王 Eval_Coefオプション追加。
	- dlshogiで追加されたやつ
		- https://tadaoyamaoka.hatenablog.com/entry/2021/10/19/230601
		- https://github.com/TadaoYamaoka/DeepLearningShogi/commit/b7f0a8773bb38e30bd4fa347d0ccd1c260868e35


- graviton2 build test #202
	- https://github.com/yaneurao/YaneuraOu/pull/202 (Mizarさんのプルリク)

	Graviton2 向けビルドテストを Ubuntu Linux 20.04 (amd64) 環境、 aarch64-linux-gnu-g++-9 コンパイラにて行います。(normal, tournament target のみ)
	Graviton2 向けビルドオプションを -mfpu=neon から -march=armv8.2-a+fp16+rcpc+dotprod+crypto に変更します。（-mfpu=neon のままではビルドテストに失敗するため）
	変更元: Graviton2をARM NEON SIMD対応 #201
	参考: https://github.com/aws/aws-graviton-getting-started/blob/main/c-c++.md
	参考: https://d1.awsstatic.com/webinars/jp/pdf/services/20200707_BlackBelt_Graviton2.pdf
	Ubuntu Linux 20.04 (amd64) 環境でのビルドテストに使うコンパイラの一部を変更します。 clang++-13 → clang++-14
	最新のclangで発生するwarning, error等を確認できるように。
	その他、ビルドマトリクスの整理など。


- bitop.hからmm_alloc.hのinclude文を削除
	- mm_alloc、以下のcommitで使わないようにしたのだった。
		https://github.com/yaneurao/YaneuraOu/commit/f726457d03ccd3c51332b8cee8254a7d2a80dc69
	- -mfpu=neonをつけてコンパイルした時にコンパイルエラーになっていた。

- Makefile、CPU種別の整理


■　2021/10/19

- Graviton2をARM NEON SIMD対応 #201
  - https://github.com/yaneurao/YaneuraOu/pull/201 (quiverさんのプルリク)


■　2021/10/17


- g++ & arm64 でビルドできない問題を修正 #200
	- https://github.com/yaneurao/YaneuraOu/pull/200 (quiverさんのプルリク)


- ベンチマークの実行時間を一定にする改良
	- ベンチマーク、探索部の改良により、実行時間が変動するのはあまり良くない性質
	- 固定時間で計測してnpsで比較すべき。
	- 現状、デフォルトでは固定depthになっているが、これを固定timeに変更する。
	- cf. https://github.com/yaneurao/YaneuraOu/issues/195
	- ベンチマーク局面、一つ追加。4局面×15秒 = 60秒。

- learnerでコンパイル時にwarning出てたの修正。


- extra/bitop.h内のマクロ定義でARM向け向け分岐が足りていない問題を修正 #199
	- https://github.com/yaneurao/YaneuraOu/pull/199 (quiverさんのプルリク)

	extra/bitop.h内のマクロ定義でARM向け向け分岐が足りていない問題を修正
	AWSにはGraviton2というARM Neoverse N1系のプロセッサが存在します。

	https://www.arm.com/why-arm/partner-ecosystem/aws


■　2021/10/12

- 学習データをまとめて読み込むようにした #196 (nodchip)
	- https://github.com/yaneurao/YaneuraOu/pull/196

- テストロスの計算のスレッド並列処理をApery方式に変更し、高速化した #197 (nodchip)
	- https://github.com/yaneurao/YaneuraOu/pull/197

- TensorRT 8.2 EarlyAccess #198
	- https://github.com/yaneurao/YaneuraOu/pull/198 (mizar)

	* - EVAL_TYPE_NAME に TensorRT のバージョンを含める
	* - ビルド時にTensorRTのdllを出力先にコピー
	* - TensorRT8.2.0.6, CUDA 11.4
	* - Ubuntu2004-README.md
	* - make-deep-ububtu : expand single-line list
	* - cuda-toolkit-11-4
	* - g++-11, clang++-12, clang++-13, clang++-14
	* - reorder compiler
	* - remove libomp5-*
	* - remove libomp5-*, and others
	* - install CUDA, TensorRT later


■　2021/09/28


- Learner::search,qsearchのコード、整理
	- コードを少し整理した。
	- 初期化コード少し足した。
	- th->selDepthの初期化は不要だったので削除。
  - reformat


- gensfenコマンド正常に生成できていなかったの修正。
	- Learner::search()でsearch<Root>にしていなかった。


■　2021/09/27 V6.50
=======
やねうら王の更新履歴 - やねうら王 Wiki : https://github.com/yaneurao/YaneuraOu/wiki/%E3%82%84%E3%81%AD%E3%81%86%E3%82%89%E7%8E%8B%E3%81%AE%E6%9B%B4%E6%96%B0%E5%B1%A5%E6%AD%B4
>>>>>>> 599378d420fa9a8cdae9b1b816615313d41ccf6e

リンクの貼り替えに御協力お願い致しますm(_ _)m
